apiVersion: v1
kind: ConfigMap
metadata:
  name: sds
data:
  # This is an example on how to use a custom bootstrap template in a pod. It was used to try various combinations
  # on configuring SDS for control plane auth. Based on the template shipped in 1.2, but simplified to keep only
  # essential
  custom_bootstrap.json: |-
    {
      "node": {
          "cluster": "testOverride"
      },
      "admin": {
            "access_log_path": "/dev/null",
            "address": {
              "socket_address": {
                "address": "0.0.0.0",
                "port_value": 15000
              }
            }
      },
    }

  cert_test.json: |-
    {
       "type_url": "type.googleapis.com/envoy.api.v2.auth.Secret",
       "resources": [
         { "@type": "type.googleapis.com/envoy.api.v2.auth.Secret",
           "name": "default",
           "tls_certificate": {
             "private_key": {
                 "inline_bytes": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBc1Q1cW9ld0dHNSs5d2tOeXVHeVBndkNYc2J3aHNaYjRRejc3NVFFWi9JZmwwbTcvCm9VbGppUGo2M0hvWjhVeVRmaUp5VW9YdWFxcGhtdTN3Y1crdlc0UWMwYW9YVlNqZVl3TklPcmkvd0hUQmlLY0QKRmNtMzVtMnVRd2hwYXR4Y0ZKS2pOU1ZIaFlXakw2b25jQ2hUeXhMRUhJVERRS0pwMERpa2dBeGV6NHhRdC9RSQpONHFWalNsQTVQazV1d1NQMFVLMTY5cFBDbEhRUk5JTTlvTGJhaTJZR2hEMkhwbkZQNlpLWDRDV2NjcE5NRHJrCnB2dE9Ha3p4R1crMXRmREpaY0tGZDBSa2VETkJxM0dOSzFlUTd5VjVIOFhGdXUyWjlOb3BPeHZHUjRYSkZDQ00KcVFKV1Q2T2xlYjQrT2R4UVhTWmcxeGFiYm9tblF2anN5Ri9GV3dJREFRQUJBb0lCQUZNQTJ1ajNZaWpmbHZyNQpvU2pTMWlaSXk1RlZmQ1h4Z0ZQbGxBczdoOUxtUlc5VndlcmpOblMzdktzeGx5S1ViT0g5K2JIQnZOUkE5REtjCnlTUW1YR1dzS2Q3YUc5RXFzWEtHMy9WMy9YeUFjUDJ3ME5ZTVFFM3VBVlN0Qk1raFp4SFBWaFVXWHpjZFRUMk8KSHFmOGlya29FYVVWVzJiU2FHRTFsWHZOenp5OFBpVElKWmhjMFg5WWlTS0ZZNVBpZ1hSandtNnAwRkRhNDYrUgpaYnhBbHFNbHZKeVRBVVRuRzZGS2VIc1NDVlBjQnZvS3ozb3dha0cxVEJYSUQ3QTZqMEhXYXMzWitzZERHUjdNCjRYUmpUMzh4N2U0QllKMWtud1NIQjczdGlvcjgwSGNOUC9heGErK2hIdDBTZFp3WTQ5ZVczSW5kanIzRWkrY0kKR3E3Ly93RUNnWUVBeGI5eDFoc3QzNlI5WXBiZjA0dkhHZGJORlE5VUFnNUVWajdwN2tERzRBZ1JMckxnNjNxYQp1Vk9NM09kc0ZYcVA1bFBmdDdHNjlJN2RadTlvaC9aTXpvZmpOMzZtK0N2cHhhRlBEc2laZ0lQdGNwNGRKbmgyCmNOb3cyNUwxUDdXWlFyWXRuZTlzdHEzT1RtSmZkUWdsOE53RzZrWmovMUpUNG1QZlhoZVUyOXNDZ1lFQTVYUzUKTWN4RU5JMVRsdUQ3eDFsV1k4L2tmQWdPS1poNVBaUXd1a2ErVmNtV3dSVlFSZmJMMmlXZWxJam1aZ3FMSE5sQgpSN21XYldWTnJSYVJHTDQyVGtJK3ArbUN4SU01S0ZoQ0srV3ppLzFXS1VHcGtWMTJ5Q0xwRDdDN01nY0lFRkxHCkxHaWM5NGdJbForcjFoZm9xOG9BcEMxZXFzdmRlTVVUUVBtRnRJRUNnWUFHR0ZTRjZPaU5FQ0RkUFJGQkQvbmYKRGdQY05sQzhqM3dEdklTeFYwWEorZld0bnMzWDlEdDRvdDZnb0hGd2FBcXZhcjVtaHcvZ0lkY3BLUS9yd09lMQpKZk1XN3N4dXNjdk96NTRFTXFLb2wyaG1OQUZxQWlTRWJmVTdqMWdIMHEwYXBVcmFwMXFPZHVUNC9ZYzdzRGliCkoreitvNVRKZGR3b0NqUUVUbTNFS1FLQmdDa3VRN2FPUklkeC9kaU1WR080d3VweSt6elBiVXRGMUN5YkZndTQKZXB5RzY0bUh1N3B5eXE5Q0pTM2ZUQXB3UmZ0TmVvdlc0UXFOTGQyc3VTbkpxWkZ1RGpTd2tnbVd5NEZVSmJ3ZgpJNVF5U1c1cUhIYThZWDhWMU9JK0E3cTh6Rk94cDJOOCt2N3A2VENCVWFQQThyOHlKOTlQVFRnMkVtK0VYeXBBCkhpRUJBb0dBSmhXQXpuWWFkWGNOUzVYNzgvZU15Z1VqdWZSQklkRkVxelVwYWFZUGR3T2Rmenc5M0pSZ3JtUTYKWkZZOUdzMHRZVnIyb1M4U3lOL1NWVHNYL3QrSytmMmxwazczelI1MHdBQVVsWU1HY1hSb0RUM09vLzU1ZFpBMgpJNmJKZHR0Ylc5aVVlWlo3QU1OY1QvYzhjV2gzcklJTXM2MzdmS3l0MFN2V0Rrdy85YWs9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
             },
             "certificate_chain": {
                 "inline_bytes": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJRENDQWdpZ0F3SUJBZ0lRTGlJcDZoaGpBd1hFQUZDRW9RTSswREFOQmdrcWhraUc5dzBCQVFzRkFEQVkKTVJZd0ZBWURWUVFLRXcxamJIVnpkR1Z5TG14dlkyRnNNQjRYRFRFNU1EY3hOVEl6TVRFeU9Gb1hEVEU1TVRBeApNekl6TVRFeU9Gb3dBRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMRSthcUhzCkJodWZ2Y0pEY3Joc2o0THdsN0c4SWJHVytFTSsrK1VCR2Z5SDVkSnUvNkZKWTRqNCt0eDZHZkZNazM0aWNsS0YKN21xcVlacnQ4SEZ2cjF1RUhOR3FGMVVvM21NRFNEcTR2OEIwd1lpbkF4WEp0K1p0cmtNSWFXcmNYQlNTb3pVbApSNFdGb3krcUozQW9VOHNTeEJ5RXcwQ2lhZEE0cElBTVhzK01VTGYwQ0RlS2xZMHBRT1Q1T2JzRWo5RkN0ZXZhClR3cFIwRVRTRFBhQzIyb3RtQm9ROWg2WnhUK21TbCtBbG5IS1RUQTY1S2I3VGhwTThSbHZ0Ylh3eVdYQ2hYZEUKWkhnelFhdHhqU3RYa084bGVSL0Z4YnJ0bWZUYUtUc2J4a2VGeVJRZ2pLa0NWaytqcFhtK1BqbmNVRjBtWU5jVwptMjZKcDBMNDdNaGZ4VnNDQXdFQUFhTitNSHd3RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHCkNDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUQwR0ExVWRFUUVCL3dRek1ER0cKTDNOd2FXWm1aVG92TDJOc2RYTjBaWEl1Ykc5allXd3Zibk12Wm05eWRHbHZMWE5rY3k5ellTOWtaV1poZFd4MApNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFWc25WS1JSd0VkSm1idHNNQXZZNWhpdERVSjlHWUNvUG1hRjdRCk9Kdk1yV1lGbkEyeFBjRkJEZGVSeGdjYjNmR2IwQS9IUW1IYzFsWWx3cGZIcUNQeUl4UytIN0tWNGJmMVpBNk0KY293RFE4QmlRaENPZXNwQU0vVkVXSTZ2TFYrc1NTWDFLcGFVZkp3QWZPSEtmSGtQcmFUWUp2U3VSNDRVMmxiSApyaHVKbEhDOGNlRWxMNWRnVytyRzBacy85STMzVDFVamR2dEJ1K3drbzF6ejhaNEFtcVovUHpaUVpFQ1hINFB1ClVWb2NvRHJnOFQvZFhhYVJ4aUtlV2pIVTBWdldCaFlEazBMbGQvdFRvcjBWSnBsN2VQT0Y3ZFYwL3NRMEpvQnUKdXVSbHRIdGpFdlFRY2IwdzIvdXRtOWtMMFY2VzFXOEZ5ZWwxVjQ4UlA4MmdNUUlQCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
             }
           }
         }]
    }

  envoy_bootstrap.json: |-
    {
      "node": {
        "id": "{{ .nodeID }}",
        "cluster": "{{ .cluster }}",
        "locality": {
          {{ if .region }}
          "region": "{{ .region }}",
          {{ end }}
          {{ if .zone }}
          "zone": "{{ .zone }}",
          {{ end }}
          {{ if .sub_zone }}
          "sub_zone": "{{ .sub_zone }}",
          {{ end }}
        },
        "metadata": {{ .meta_json_str }}
      },
      "stats_config": {
        "use_all_default_tags": false,
        "stats_tags": [
          {
            "tag_name": "cluster_name",
            "regex": "^cluster\\.((.+?(\\..+?\\.svc\\.cluster\\.local)?)\\.)"
          },
          {
            "tag_name": "tcp_prefix",
            "regex": "^tcp\\.((.*?)\\.)\\w+?$"
          },
          {
            "tag_name": "response_code",
            "regex": "_rq(_(\\d{3}))$"
          },
          {
            "tag_name": "response_code_class",
            "regex": "_rq(_(\\dxx))$"
          },
          {
            "tag_name": "http_conn_manager_listener_prefix",
            "regex": "^listener(?=\\.).*?\\.http\\.(((?:[_.[:digit:]]*|[_\\[\\]aAbBcCdDeEfF[:digit:]]*))\\.)"
          },
          {
            "tag_name": "http_conn_manager_prefix",
            "regex": "^http\\.(((?:[_.[:digit:]]*|[_\\[\\]aAbBcCdDeEfF[:digit:]]*))\\.)"
          },
          {
            "tag_name": "listener_address",
            "regex": "^listener\\.(((?:[_.[:digit:]]*|[_\\[\\]aAbBcCdDeEfF[:digit:]]*))\\.)"
          },
          {
            "tag_name": "mongo_prefix",
            "regex": "^mongo\\.(.+?)\\.(collection|cmd|cx_|op_|delays_|decoding_)(.*?)$"
          }
        ],
        "stats_matcher": {
          "inclusion_list": {
            "patterns": [
              {{- range $a, $s := .inclusionPrefix }}
              {
              "prefix": "{{$s}}"
              },
              {{- end }}
              {{- range $a, $s := .inclusionSuffix }}
              {
              "suffix": "{{$s}}"
              },
              {{- end }}
              {{- range $a, $s := .inclusionRegexps }}
              {
              "regex": "{{js $s}}"
              },
              {{- end }}
            ]
          }
        }
      },
      "admin": {
        "access_log_path": "/dev/null",
        "address": {
          "socket_address": {
            "address": "{{ .localhost }}",
            "port_value": {{ .config.ProxyAdminPort }}
          }
        }
      },
      "dynamic_resources": {
        "lds_config": {
          "ads": {}
        },
        "cds_config": {
          "ads": {}
        },
        "ads_config": {
          "api_type": "GRPC",
          "grpc_services": [
            {
              "envoy_grpc": {
                "cluster_name": "xds-grpc"
              }
            }
          ]
        }
      },
      "static_resources": {
        "clusters": [
          {
            "name": "prometheus_stats",
            "type": "STATIC",
            "connect_timeout": "0.250s",
            "lb_policy": "ROUND_ROBIN",
            "hosts": [
              {
                "socket_address": {
                  "protocol": "TCP",
                  "address": "{{ .localhost }}",
                  "port_value": {{ .config.ProxyAdminPort }}
                }
              }
            ]
          },
          {
            "name": "xds-grpc",
            "type": "STRICT_DNS",
            "dns_refresh_rate": "{{ .dns_refresh_rate }}",
            "dns_lookup_family": "{{ .dns_lookup_family }}",
            "connect_timeout": "{{ .connect_timeout }}",
            "lb_policy": "ROUND_ROBIN",
            {{ if eq .config.ControlPlaneAuthPolicy 1 }}
            "tls_context": {
              "common_tls_context": {
                "alpn_protocols": [
                  "h2"
                ],
                {{ if 0 }}
                {{ if 0 }}
                "tls_certificates": [
                  {
                    "certificate_chain": {
                      "filename": "/etc/certs/cert-chain.pem"
                    },
                    "private_key": {
                      "filename": "/etc/certs/key.pem"
                    }
                  }
                ],
                {{ else }}
                "tlsCertificateSdsSecretConfigs": [
                        {
                          "name": "default",
                          "sdsConfig": {
                            "path": "/etc/istio/custom-bootstrap/cert_test.json"
                          }
                        }
                ],
                {{ end }}
                {{ else }}
                "tlsCertificateSdsSecretConfigs": [
                    {
                      "name": "default",
                      "sdsConfig": {
                        "apiConfigSource": {
                          "apiType": "GRPC",
                          "grpcServices": [
                            {
                              "googleGrpc": {
                                "targetUri": "unix:/var/run/sds/uds_path",
                                "channelCredentials": {
                                  "localCredentials": {}
                                },
                                "callCredentials": [
                                  {
                                    "fromPlugin": {
                                      "name": "envoy.grpc_credentials.file_based_metadata",
                                      "typedConfig": {
                                        "@type": "type.googleapis.com/envoy.config.grpc_credential.v2alpha.FileBasedMetadataConfig",
                                        "secretData": {
                                          "filename": "/var/run/secrets/kubernetes.io/serviceaccount/token"
                                        },
                                        "headerKey": "istio_sds_credentials_header-bin"
                                      }
                                    }
                                  }
                                ],
                                "statPrefix": "sdsstat",
                                "credentialsFactoryName": "envoy.grpc_credentials.file_based_metadata"
                              }
                            }
                          ]
                        },
                        "initialFetchTimeout": "0s"
                      }
                    }
                ],
                {{ end }}
                "validation_context": {
                  "trusted_ca": {
                    "filename": "/etc/certs/root-cert.pem"
                  },
                  "verify_subject_alt_name": [
                    {{- range $a, $s := .pilot_SAN }}
                    "{{$s}}"
                    {{- end}}
                  ]
                }
              }
            },
            {{ end }}
            "hosts": [
              {
                "socket_address": {{ .pilot_grpc_address }}
              }
            ],
            "circuit_breakers": {
              "thresholds": [
                {
                  "priority": "DEFAULT",
                  "max_connections": 100000,
                  "max_pending_requests": 100000,
                  "max_requests": 100000
                },
                {
                  "priority": "HIGH",
                  "max_connections": 100000,
                  "max_pending_requests": 100000,
                  "max_requests": 100000
                }
              ]
            },
            "upstream_connection_options": {
              "tcp_keepalive": {
                "keepalive_time": 300
              }
            },
            "http2_protocol_options": { }
          }
          {{ if .zipkin }}
          ,
          {
            "name": "zipkin",
            "type": "STRICT_DNS",
            "dns_refresh_rate": "{{ .dns_refresh_rate }}",
            "dns_lookup_family": "{{ .dns_lookup_family }}",
            "connect_timeout": "1s",
            "lb_policy": "ROUND_ROBIN",
            "hosts": [
              {
                "socket_address": {{ .zipkin }}
              }
            ]
          }
          {{ else if .lightstep }}
          ,
          {
            "name": "lightstep",
            "http2_protocol_options": {},
            {{ if .lightstepSecure }}
            "tls_context": {
              "common_tls_context": {
                "alpn_protocols": [
                  "h2"
                ],
                "validation_context": {
                  "trusted_ca": {
                    "filename": "{{ .lightstepCacertPath }}"
                  }
                }
              }
            },
            {{ end }}
            "type": "STRICT_DNS",
            "dns_refresh_rate": "{{ .dns_refresh_rate }}",
            "dns_lookup_family": "{{ .dns_lookup_family }}",
            "connect_timeout": "1s",
            "lb_policy": "ROUND_ROBIN",
            "hosts": [
              {
                "socket_address": {{ .lightstep }}
              }
            ]
          }
          {{ else if .datadog }}
          ,
          {
            "name": "datadog_agent",
            "connect_timeout": "1s",
            "type": "STRICT_DNS",
            "dns_refresh_rate": "{{ .dns_refresh_rate }}",
            "dns_lookup_family": "{{ .dns_lookup_family }}",
            "lb_policy": "ROUND_ROBIN",
            "hosts": [
              {
                "socket_address": {{ .datadog }}
              }
            ]
          }
          {{ end }}
          {{ if .envoy_metrics_service }}
          ,
          {
            "name": "envoy_metrics_service",
            "type": "STRICT_DNS",
            "dns_refresh_rate": "{{ .dns_refresh_rate }}",
            "dns_lookup_family": "{{ .dns_lookup_family }}",
            "connect_timeout": "1s",
            "lb_policy": "ROUND_ROBIN",
            "http2_protocol_options": {},
            "hosts": [
              {
                "socket_address": {{ .envoy_metrics_service }}
              }
            ]
          }
          {{ end }}
          {{ if .envoy_accesslog_service }}
          ,
          {
            "name": "envoy_accesslog_service",
            "type": "STRICT_DNS",
            "dns_refresh_rate": "{{ .dns_refresh_rate }}",
            "dns_lookup_family": "{{ .dns_lookup_family }}",
            "connect_timeout": "1s",
            "lb_policy": "ROUND_ROBIN",
            "http2_protocol_options": {},
            "hosts": [
              {
                "socket_address": {{ .envoy_accesslog_service }}
              }
            ]
          }
          {{ end }}
        ],
        "listeners":[
          {
            "address": {
              "socket_address": {
                "protocol": "TCP",
                "address": "{{ .wildcard }}",
                "port_value": 15090
              }
            },
            "filter_chains": [
              {
                "filters": [
                  {
                    "name": "envoy.http_connection_manager",
                    "config": {
                      "codec_type": "AUTO",
                      "stat_prefix": "stats",
                      "route_config": {
                        "virtual_hosts": [
                          {
                            "name": "backend",
                            "domains": [
                              "*"
                            ],
                            "routes": [
                              {
                                "match": {
                                  "prefix": "/stats/prometheus"
                                },
                                "route": {
                                  "cluster": "prometheus_stats"
                                }
                              }
                            ]
                          }
                        ]
                      },
                      "http_filters": {
                        "name": "envoy.router"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
      {{ if .zipkin }}
      ,
      "tracing": {
        "http": {
          "name": "envoy.zipkin",
          "config": {
            "collector_cluster": "zipkin",
            "collector_endpoint": "/api/v1/spans",
            "trace_id_128bit": "true",
            "shared_span_context": "false"
          }
        }
      }
      {{ else if .lightstep }}
      ,
      "tracing": {
        "http": {
          "name": "envoy.lightstep",
          "config": {
            "collector_cluster": "lightstep",
            "access_token_file": "{{ .lightstepToken}}"
          }
        }
      }
      {{ else if .datadog }}
      ,
      "tracing": {
        "http": {
          "name": "envoy.tracers.datadog",
          "config": {
            "collector_cluster": "datadog_agent",
            "service_name": "{{ .cluster }}"
          }
        }
      }
      {{ end }}
      {{ if or .envoy_metrics_service .statsd }}
      ,
      "stats_sinks": [
        {{ if .envoy_metrics_service }}
        {
          "name": "envoy.metrics_service",
          "config": {
            "grpc_service": {
              "envoy_grpc": {
                "cluster_name": "envoy_metrics_service"
              }
            }
          }
        },
        {{ end }}
        {{ if .statsd }}
        {
          "name": "envoy.statsd",
          "config": {
            "address": {
              "socket_address": {{ .statsd }}
            }
          }
        },
        {{ end }}
      ]
      {{ end }}
    }
